<?php

/**
 * Class Object
 * @property int $id
 */
abstract class Object{

    /** @var  PDO */
    static $db;
    protected $attributes = [];

    public function __construct( $params = [])
    {

        foreach ($params as $param_name => $param_value){
            if (property_exists(static::class, $param_name ))
                $this->$param_name = $param_value;
            else{
                $sFuncName = 'set'.ucfirst($param_name);
                if (method_exists($this,$sFuncName ))
                    $this->$sFuncName($param_value);
            }
        }
    }

    public function __get($name)
    {
        $sFuncName = 'get'.ucfirst($name);
        if (method_exists($this,$sFuncName ))
            return $this->$sFuncName();

        return null;
    }

    public function __set($name,$value)
    {
        $sFuncName = 'set'.ucfirst($name);
        if (method_exists($this,$sFuncName ))
            $this->$sFuncName($value);

    }

    /**
     * @return int
     */
    public function getId()
    {
        return isset($this->attributes['id'])? $this->attributes['id'] : null;
    }

    /**
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->attributes['id'] = $id;
        return $this;

    }

    static function TableName(){

        return '';
    }

    /**
     * @param integer $id
     * @return static
     */
    public static function findById($id){

        $table = static::TableName();

        $oQuery = Object::$db->prepare("SELECT * FROM {$table} WHERE id=:need_id");
        $oQuery->execute(['need_id' => $id]);
        $aRes = $oQuery->fetch(PDO::FETCH_ASSOC);

        return $aRes? new static($aRes):null;
    }

    protected function insert(){
        $table = static::TableName();
        $aLabels = [];
        $aValues = [];
        foreach ( $this->attributes as $name => $value){
            $aLabels[] = $name;
            $aValues[] = ':'.$name;
        }
        $sLabels = implode(',',$aLabels);
        $sValues = implode(',',$aValues);
        $query = self::$db->prepare("INSERT INTO  {$table} ({$sLabels}) VALUES ({$sValues}) ");
        $query->execute($this->attributes);

        if ($iId = self::$db->lastInsertId())
            $this->setId($iId);


    }

    protected function update(){
        $table = static::TableName();
        $aUpdates = [];
        foreach ( $this->attributes as $name => $value){
            if ($name == 'id') continue;
            $aUpdates[] = $name.'=:'.$name;
        }
        $sUpdates = implode(', ',$aUpdates);
        $query = self::$db->prepare("UPDATE  {$table} SET {$sUpdates} WHERE id=:id");
        $query->execute($this->attributes);


    }

    public function save(){
        if ($this->id)
            $this->update();
        else
            $this->insert();
    }

}

/**
 * Class User
 * @property int $age
 * @property string $name
 * @property int $sex
 */
class User extends Object{
    static function TableName()
    {

        return 'users'; // TODO: Change the autogenerated stub
    }

    /**
     * @return int
     */
    public function getEmail()
    {
        return isset($this->attributes['email'])? $this->attributes['email'] : null;
    }

    /**
     * @param int $age
     * @return $this
     */
    public function setEmail($email)
    {
        $this->attributes['email'] = $email;
        return $this;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return isset($this->attributes['name'])? $this->attributes['name'] : '';
    }

    /**
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->attributes['name'] = $name;
        return $this;
    }

    /**
     * @return int
     */
    public function getType()
    {
        return isset($this->attributes['type'])? $this->attributes['type'] : null;
    }

    /**
     * @param int $sex
     * @return $this
     */
    public function setType($type)
    {
        $this->attributes['type'] = $type;
        return $this;
    }

    public function setPassword($password)
    {
        $this->attributes['password'] = $password;
        return $this;
    }

    public function getPassword()
    {
        return isset($this->attributes['password'])? $this->attributes['password'] : null;
    }


}
class News extends Object{
    static function TableName()
    {
        return 'news'; // TODO: Change the autogenerated stub
    }

    
    public function getTitle()
    {
        return isset($this->attributes['title'])? $this->attributes['title'] : null;
    }

   
    public function setTitle($title)
    {
        $this->attributes['title'] = $title;
        return $this;
    }
    public function getShrotdesc()
    {
        return isset($this->attributes['shrotdesc'])? $this->attributes['shrotdesc'] : null;
    }

   
    public function setShrotdesc($shrotdesc)
    {
        $this->attributes['shrotdesc'] = $shrotdesc;
        return $this;
    }
    public function getText()
    {
        return isset($this->attributes['text'])? $this->attributes['text'] : null;
    }

   
    public function setText($text)
    {
        $this->attributes['text'] = $text;
        return $this;
    }

    public function getNewsList($author)
    {
        $oQuery = Object::$db->prepare("SELECT * FROM news WHERE author=:need_author");
        $oQuery->execute(['need_author' => $author]);
        $aRes[] = $oQuery->fetchAll(PDO::FETCH_ASSOC);
        return $aRes;
    }
}
class Articels extends Object{
    static function TableName()
    {
        return 'articeles'; // TODO: Change the autogenerated stub
    }

    
    public function getTitle()
    {
        return isset($this->attributes['title'])? $this->attributes['title'] : null;
    }

   
    public function setTitle($title)
    {
        $this->attributes['title'] = $title;
        return $this;
    }
    public function getShrotdesc()
    {
        return isset($this->attributes['shrotdesc'])? $this->attributes['shrotdesc'] : null;
    }

   
    public function setShrotdesc($shrotdesc)
    {
        $this->attributes['shrotdesc'] = $shrotdesc;
        return $this;
    }
    public function getText()
    {
        return isset($this->attributes['text'])? $this->attributes['text'] : null;
    }

   
    public function setText($text)
    {
        $this->attributes['text'] = $text;
        return $this;
    }

    public function getArticelesList($author)
    {
        $oQuery = Object::$db->prepare("SELECT * FROM articeles WHERE author=:need_author");
        $oQuery->execute(['need_author' => $author]);
        $aRes[] = $oQuery->fetchAll(PDO::FETCH_ASSOC);
        return $aRes;
    }
}

class Comments extends Object{
    static function TableName()
    {
        return 'comments'; // TODO: Change the autogenerated stub
    }

    
    public function getAuthor()
    {
        return isset($this->attributes['author'])? $this->attributes['author'] : null;
    }

   
    public function setAuthor($author)
    {
        $this->attributes['author'] = $author;
        return $this;
    }
    public function getText()
    {
        return isset($this->attributes['text'])? $this->attributes['text'] : null;
    }

   
    public function setText($text)
    {
        $this->attributes['text'] = $text;
        return $this;
    }
    public function getid_news()
    {
        return isset($this->attributes['id_news'])? $this->attributes['id_news'] : null;
    }

   
    public function setid_news($id_news)
    {
        $this->attributes['id_news'] = $id_news;
        return $this;
    }
}